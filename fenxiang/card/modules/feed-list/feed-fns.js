/** * feed-list功能集，目前只有批复和指令 * by liuxf */define(function (require, exports, module) {    var tpl = require('modules/feed-list/feed-list.html');    var util = require('util');    var publish = require('modules/publish/publish');    var moment = require('moment');    /* 定义组件 */    var MediaMaker = publish.mediaMaker; //多媒体按钮组件    var AtInput = publish.atInput; //at输入框    var SelectBar = publish.selectBar; //选人组件    var TimeSelect = publish.timeSelect; //时间选择组件    var DateSelect = publish.dateSelect; //日期选择组件    var contactData = util.getContactData(); //所有人    var currentUserData = contactData["u"]; //自己    /**     * 批复的 V     * 普通选项参数会被注册到 this.options 中。     * 特殊的选项： model, collection, el, id, className, 以及 tagName。     * 如果视图定义了 initialize 函数，当视图实例化时该函数便立刻执行。     * 如果希望创建一个指向 DOM 中已存在的元素的视图，传入该元素作为选项： new View({el: existingElement})。     */    var ApproveV = Backbone.View.extend({        tagName: 'div',        model: null,        feedReply: null,        itemV: null, //listV        className: 'feed-list-approve list-repeat',        template: _.template($(tpl).filter('.approve-template').html()),        // 事件绑定        events: {            "click .aj-appr-com": "appCom", //3个批复按钮公共事件            "click .aj-appr-yes": "appYes", //同意            "click .aj-appr-no": "appNo", //不同意            "click .aj-appr-re": "appRe", //复议            "click .f-submit": "submit", //提交            "click .f-cancel": "cancel", //取消            "click .update-btn": "updateM" //重新请求数据        },        // 重新请求数据        updateM: function () {            this.model.collection.fetch(this.setoData());        },        // 初始化设置        initialize: function () {            this.render(); //渲染            this.setupDoms(); //设置Doms            this.url = '/FeedApprove/ApproverSendFeedReply'; //批复-同意接口地址            this.feedReply = this.options.feedReply;            this.itemV = this.options.itemV;            this.operationtype = 1; //操作类型1，同意 2，不同意，3取消        },        // 原始数据格式化        formatData: function (originData) {            var formatData = {};            _.extend(formatData, originData);            formatData.profileImage = currentUserData.profileImage || ''; //追加到原始数据里面            return formatData;        },        // 渲染        render: function () {            var elEl = this.$el;            var renderTemplate = this.template;            var originData = this.model.toJSON().originData;            elEl.html(renderTemplate(this.formatData(originData)));            return this;        },        // 设置组件        setupComponent: function () {            var elEl = this.$el;            var inputTextEl = $('.input-text', elEl);            var apperEl = $('.apper', elEl);            var ccerEl = $('.ccer', elEl);            var mediaEl = $('.media', elEl);            var originData = this.model.toJSON().originData;            var defaultApproveData = util.getPublishDefaultUser('approveApprovers');            var myId = currentUserData.employeeID; //我的id            var sbEmployeeData = util.excludeContactData([myId, originData.sender.employeeID], 'p');            this.originData = originData;            // 审批人选人组件            if (!this.appersb) {                var appersb = new SelectBar({                    "element": apperEl,                    "data": [                        {                            "title": "同事",                            "type": "p",                            "list": sbEmployeeData //数据来源通过contactData获取                        }                    ],                    "singleCked": true, //单选？                    "title": "选择下一个审批人（一个）",                    "acInitData": util.getPublishDefaultUser('approveApprovers'),                    "autoCompleteTitle": "请输入姓名或拼音"                });                // 修正默认审批人，filter掉发出审批的用户                defaultApproveData[0].store = _.reject(defaultApproveData[0].store, function (itemData) {                    return itemData.id == originData.employeeID;                });                appersb.setAcInitData(defaultApproveData);                this.appersb = appersb;            }            // 抄送人选人组件            if (!this.ccersb) {                var ccersb = new SelectBar({                    "element": ccerEl,                    "data": [                        {                            "title": "同事",                            "type": "p",                            "list": sbEmployeeData //数据来源通过contactData获取                        },                        {                            "title": "部门",                            "type": "g",                            "list": contactData["g"] //数据来源通过contactData获取                        }                    ],                    "singleCked": false, //单选？                    "title": "添加抄送人或部门",                    "autoCompleteTitle": "请输入姓名或拼音"                });                this.ccersb = ccersb;            }            // 设置多媒体功能            if (!this.media) {                var media = new MediaMaker({                    "element": mediaEl,                    "action": ["h5imgupload", "h5attachupload", "at"],                    "actionOpts": {                        "at": {                            "inputSelector": inputTextEl,                            "spOpts": {                                "data": [                                    {                                        "title": "同事",                                        "type": "p",                                        "list": contactData['p']                                    },                                    {                                        "title": "部门",                                        "type": "g",                                        "list": contactData['g']                                    }                                ]                            }                        }                    }                });                this.media = media;            }            // at input            if (!this.atInput) {                var atInput = new AtInput({                    "element": inputTextEl,                    "withAt": true                });                this.atInput = atInput;            }        },        // 设置Doms        setupDoms: function () {            var elEl = this.$el;            this.elEl = elEl;            this.approveBdEl = $('.approve-bd', elEl); //表单身体部分            this.apperEl = $('.apper', elEl); //审批人            this.ccerEl = $('.ccer', elEl); //抄送人            this.inputTextEl = $('.input-text', elEl); //输入框            this.mediaEl = $('.media', elEl); //输入框            this.submitBtn = $('.f-submit', elEl); //提交按钮            this.allapperBtn = $('.approve-hd button', elEl); //所有批复按钮        },        appCom: function (e) {            var meEl = $(e.currentTarget);            this.allapperBtn.attr('disabled', 'disabled');            this.allapperBtn.addClass('button-state-disabled');            this.setupComponent(); //设置组件            this.approveBdEl.show();        },        // 审批-同意        appYes: function () {            var approverid = this.appersb.getSelectedData().p || '';            this.approveBdEl.show();            this.apperEl.show();            this.ccerEl.show();            this.mediaEl.hide();            this.inputTextEl.val('同意。');            this.url = '/FeedApprove/ApproverSendFeedReply'; //批复-同意的接口地址            this.operationtype = 1;            this.submitBtn.removeClass('re');        },        // 审批-不同意        appNo: function () {            this.approveBdEl.show();            this.ccerEl.show();            this.apperEl.hide();            this.mediaEl.hide();            this.appersb.removeAllItem(); //清空选人组件数据            this.inputTextEl.val('不同意。');            this.url = '/FeedApprove/ApproverSendFeedReply'; //批复-不同意的接口地址            this.operationtype = 2;            this.submitBtn.removeClass('re');        },        // 审批-复议        appRe: function () {            this.approveBdEl.show();            this.apperEl.hide();            this.ccerEl.hide();            this.mediaEl.show();            this.appersb.removeAllItem(); //清空选人组件数据            this.ccersb.removeAllItem(); //清空选人组件数据            this.inputTextEl.val('').trigger('autosize.resize');            this.url = '/FeedApprove/ApproverOnlySendFeedReply'; //批复-复议的接口地址            this.submitBtn.addClass('re');        },        // 设置接口参数        setoData: function () {            var elEl = this.element;            var issendEl = $('.is-sendms', elEl);            var issendsms = issendEl.is(':checked');            var replycontent = this.inputTextEl.val();            var feedid = this.model.get("feedID");            var appersbData = this.appersb.getSelectedData();            var approverid = appersbData.p || [];            var ccersbData = this.ccersb.getSelectedData();            var employeeids = ccersbData.p || [];            var employeeidsG = ccersbData.g || [];            var employeeNames = '';            var oData = {};            _.each(employeeids, function (employeeId) {                employeeNames += '@' + util.getContactDataById(employeeId, 'p').name + ' ';            });            _.each(employeeidsG, function (employeeId) {                employeeNames += '@' + util.getContactDataById(employeeId, 'g').name + ' ';            });            if (employeeNames) {                replycontent += employeeNames;            }            approverid = Number(approverid[0]) || null;            var files = this.media.getUploadValue();            oData["fileInfos"] = [];            _.each(files, function (file) {                if (file.uploadType == "img") {                    oData["fileInfos"].push({                        "value": 2, //FeedAttachType                        "value1": file.pathName,                        "value2": file.size, //文件总长度（字节）                        "value3": file.name //文件原名                    });                } else if (file.uploadType == "attach") {                    oData["fileInfos"].push({                        "value": 3, //FeedAttachType                        "value1": file.pathName,                        "value2": file.size, //文件总长度（字节）                        "value3": file.name //文件原名                    });                }            });            _.extend(oData, {"feedID": feedid, //信息源ID                "replyContent": replycontent, //回复内容                "approverID": approverid, //审批人ID，可以为0                "operationType": this.operationtype, //操作类型：枚举FeedApproveOperationType 同意1，不同意2，取消3                "employeeIDs": employeeids, //抄送员工ID                "isSendSms": issendsms, //是否发送短信                "replyToEmployeeID": 0,                "replyToReplyID": 0            });            return oData;        },        addRangeAlert: function (params) {            params = _.extend({                "inputSelector": null,                "feedID": 0,                "replyContent": "",                "sendCore": FS.EMPTY_FN,                "sendModalSelector": null            }, params || {});            //获取at内容            var atContents = util.getAtFromInput($(params.inputSelector)),                sendModal = $(params.sendModalSelector);            //验证是否有多加的at范围            if (atContents.length > 0 && params.feedID) {                util.api({                    "url": "/Feed/SendFeedReplyAtEmpCheck",                    "data": {                        "feedID": params.feedID,                        "replyContent": params.replyContent                    },                    "success": function (responseData) {                        var dataRoot,                            hasNewRange = false,                            message = '回复中提到的员工：';                        if (responseData.success) {                            dataRoot = responseData.value;                            hasNewRange = !dataRoot.value;                            if (hasNewRange) {                                message += dataRoot.value1 + '不在信息的原始范围中，是否要添加？添加后他们将能看到信息的原文和所有该信息的回复。';                                util.confirm(message, '添加范围提示', function () {                                    params.sendCore();                                }, {                                    "onCancel": function () {                                        sendModal.hide();                                    }                                });                            } else {                                //直接发送                                params.sendCore();                            }                        }                    }                });            } else {                //直接发送                params.sendCore();            }        },        // 关键回复接口操作        fetch: function (oData) {            var elEl = this.$el;            var that = this;            var requestData = that.setoData();            //上传附件之后再取数据            this.media.send(function (sendCb, sendModal) {                if (requestData.approverID) {                    that.url = '/FeedApprove/AgreeToNextApprover'; //批复-同意或不同意并转发下一个审批人的接口地址                } else {                    that.url = '/FeedApprove/ApproverSendFeedReply'; //批复-同意或不同意的接口地址                }                that.addRangeAlert({                    "inputSelector": that.inputTextEl,                    "feedID": requestData.feedID,                    "replyContent": requestData.replyContent,                    "sendCore": function () {                        // ajax                        util.api({                            "url": that.url,                            "type": 'post',                            "data": requestData,                            "dataType": 'json',                            "success": function (responseData) {                                if (responseData.success) {                                    that.feedReply.refreshList(); //刷新回复列表                                    that.itemV.updateModel(); //刷新listV                                    //                            that.cancel();                                }                                sendCb();                            },                            "error": function(){                            	sendCb();                            	util.alert('系统繁忙，请稍后重试。');                            }                        }, {                            "submitSelector": that.submitBtn                        });                    },                    "sendModalSelector": sendModal                });            }, elEl);        },        // 普通回复接口操作        replyfetch: function () {            var elEl = this.$el;            var requestData;            var that = this;            var itemEl = this.itemV.$el;            var tBtnEl = $('.aj-approbtn', itemEl);            //上传附件之后再取数据            this.media.send(function (sendCb, sendModel) {                requestData = that.setoData();                that.feedReply.replyWithData(requestData, {                    "mediaSendCb": sendCb, // media的CB                    "sendClearCb": function (responsData) {                        that.cancel();                        that.media.resetAll();                    }, // 提交后的CB                    "mediaSendModal": sendModel,                    "subBtnSelector": that.submitBtn //提交按钮                });            }, elEl);        },        // 审批-提交        submit: function (e) {            var meEl = $(e.currentTarget);            if (this.isEmpty(this.inputTextEl)) { //如果为空暂定操作                if (meEl.is('.re')) { //如果是普通回复                    this.replyfetch(this.setoData());                } else {//如果是关键回复                    this.fetch(this.setoData());                }            }        },        // 审批-取消        cancel: function () {            this.allapperBtn.removeAttr('disabled');            this.allapperBtn.removeClass('button-state-disabled');            this.approveBdEl.hide();            this.inputTextEl.val('').trigger('autosize.resize');        },        // 判断表单内容是否为空        isEmpty: function (target) {            var targetText = target.val();            var passed = true;            targetText = $.trim(targetText);            // 内容不能为空            if (targetText == "") {                util.showInputError(target);                passed = false;            }            // 不能超过2000字            if (targetText.length > 2000) {                util.alert('发送内容不超过2000字，目前已超出<em>' + (targetText.length - 2000) + '</em>个字');                passed = false;            }            return passed;        },        // 清空        destroy: function () {            this.remove();        }    });    /**     * 指令的 V     */    var CommandV = Backbone.View.extend({        tagName: 'div',        feedReply: null,        className: 'feed-list-command list-repeat',        template: _.template($(tpl).filter('.command-template').html()),        events: {            "click .topbtn": "allBtn", //所有按钮的事件            "click .normal-btn": "normalBtn", //普通回复            "click .complete-btn": "completeBtn", //已完成，汇报结果            "click .undone-btn": "undoneBtn", //未完成<br/>继续执行            "click .cancel-btn": "cancelBtn", //取消指令<br/>转他人执行            "click .done-btn": "doneBtn", //已完成<br/>点评结果            "click .f-submit": "submit", //提交            "click .f-cancel": "cancel", //取消            "click .update-btn": "updateM" //重新请求数据        },        updateM: function (e) {            this.model.collection.fetch(this.setoData());        },        initialize: function () {            this.render(); //渲染            this.feedReply = this.options.feedReply;            this.originData = this.model.toJSON().originData;            this.itemV = this.options.itemV;            this.setupDoms(); //设置Doms            this.setComStatus(); //设置功能按钮显示状态            /**             * 1 已完成汇报结果             * 2 未完成继续执行             * 3             * 4 已完成点评结果             */            this.operationtype = 1;            this.commandBdEl.hide();//先把身体隐藏        },        // 设置组件        setupComponent: function () {            var elEl = this.$el;            var inputTextEl = $('.input-text', elEl);            var ccerEl = $('.ccer', elEl);            var mediaEl = $('.media', elEl);            var media2El = $('.media2', elEl);            var originData = this.model.toJSON().originData;            var defaultApproveData = util.getPublishDefaultUser('approveApprovers');            var myId = currentUserData.employeeID; //我的id            var sbEmployeeData = util.excludeContactData([myId, originData.sender.employeeID], 'p');//过滤掉自己的员工列表            this.originData = originData;            var defaultWorker = {                id: originData.work.executer.employeeID,                name: originData.work.executer.name,                type: "p"            };            // 执行人选人组件            if (!this.worktosb) {                var worktosb = new SelectBar({                    "element": this.worktoEl,                    "data": [                        {                            "title": "同事",                            "type": "p",                            "list": sbEmployeeData                        }                    ],                    "title": "选择指令执行人（一个）",                    "acInitData": util.getPublishDefaultUser("workExecuters"),                    "singleCked": true, //可以多选                    "autoCompleteTitle": "请输入姓名或拼音"                });                worktosb.addItem(defaultWorker);                this.worktosb = worktosb;            }            // 抄送人选人组件            if (!this.ccersb) {                var ccersb = new SelectBar({                    "element": this.ccerEl,                    "data": [                        {                            "title": "同事",                            "type": "p",                            "list": contactData['p']                        }                    ],                    "title": "添加抄送人",                    "singleCked": false, //可以多选                    "acInitData": util.getPublishRange('work', true),    //忽略部门信息                    "autoCompleteTitle": "请输入同事的姓名或拼音"                });                this.ccersb = ccersb;            }            // 指令完成时间组件            if (!this.setotherSelectData) {                var setotherSelectData = new DateSelect({                    "element": this.sDEl,                    "placeholder": "选择日期",                    "formatStr": "YYYY年MM月DD日（dddd）"                });                //如果time栏为空，选择date栏时默认选中第一个time option                setotherSelectData.on('change', function () {                    if (setotherSelectTime.getValue() == "") {                        setotherSelectTime.selector.select(0);                    }                });                this.setotherSelectData = setotherSelectData;            }            if (!this.setotherSelectTime) {                var setotherSelectTime = new TimeSelect({                    "element": this.sTEl,                    "placeholder": "选择时间"                });                this.setotherSelectTime = setotherSelectTime;            }            // 设置多媒体功能            if (!this.media) {                var media = new MediaMaker({                    "element": mediaEl, "action": ["h5imgupload", "h5attachupload", "at"],                    "actionOpts": {"at": {                        "inputSelector": inputTextEl,                        "spOpts": {                            "data": [                                {                                    "title": "同事",                                    "type": "p",                                    "list": contactData['p']                                },                                {                                    "title": "部门",                                    "type": "g",                                    "list": contactData['g']                                }                            ]                        }                    }                    }                });                this.media = media;            }            // 设置多媒体功能(指令转其他人)            if (!this.media2) {                var media2 = new MediaMaker({                    "element": media2El, "action": ["at", "topic"],                    "actionOpts": {                        "at": {                            "inputSelector": inputTextEl,                            "spOpts": {                                "data": [                                    {                                        "title": "同事",                                        "type": "p",                                        "list": contactData['p']                                    },                                    {                                        "title": "部门",                                        "type": "g",                                        "list": contactData['g']                                    }                                ]                            }                        },                        "topic": {                            "inputSelector": inputTextEl                        }                    }                });                this.media2 = media2;            }            // at input            if (!this.atInput) {                this.atInput = new AtInput({                    "element": inputTextEl,                    "withAt": true                });            }        },        // 设置Doms        setupDoms: function () {            var elEl = this.$el;            var itemEl = this.itemV.$el;            this.itemEl = itemEl;            this.replaySectionEl = $('.replay-section', itemEl);            this.commandHdEl = $('.command-hd', elEl); //表单头部分             this.commandBdEl = $('.command-bd', elEl); //表单身体部分             this.swrHdEl = $('.swr-action-tbar', elEl); //都有点评能力头部按钮             this.rwrHdEl = $('.rwr-action-tbar', elEl); //都有点评能力头部按钮             this.ccerEl = $('.ccer', elEl); //抄送人            this.raterEl = $('.rater', elEl); //评分            this.worktoEl = $('.workto-sb', elEl); //指令执行人              this.sDEl = $('.setother-selectdata', elEl); //指令完成时间DATE            this.sTEl = $('.setother-selecttime', elEl); //指令完成时间TIME            this.inputTextEl = $('.input-text', elEl); //输入框            this.setotherEl = $('.setother-wrapper', elEl); //下属布置工作            this.mediaEl = $('.media', elEl);            this.media2El = $('.media2', elEl);            this.mwarpEl = $('.m-warp', elEl);            this.submitBtn = $('.f-submit', elEl); //提交按钮            this.allapperBtn = $('.command-hd button', elEl); //所有指令按钮        },        // 设置点评状态(头部功能按钮根据状态不同显示的按钮也不同)        setComStatus: function () {            $('.detail-islike-list-warp', this.itemV.$el).hide();            $('.islike-btn', this.itemV.$el).removeClass('fl-common-up-arrow');            // 不具备点评和汇报            this.swrHdEl.hide();            this.rwrHdEl.hide();            var replyState = this.feedReply.getReplyState();            //如果不是是普通回复则不显示输入框            if (replyState != 'plain') {                this.feedReply.set("showMainInput", false);            } else {                this.feedReply.set("showMainInput", true);            }            // 有点评的能力            if (this.originData.work.assignerID == currentUserData.id && this.originData.work.canComment) {                this.swrHdEl.show();                this.feedReply.set("showMainInput", false);                this.replaySectionEl.show();                this.replaySectionEl.find('.list-repeat').show();            }            //有汇报报结果的能力            if (this.originData.work.executerID == currentUserData.id && this.originData.work.canSubmit) {                this.rwrHdEl.show();                this.feedReply.set("showMainInput", false);                this.replaySectionEl.show();                this.replaySectionEl.find('.list-repeat').show();            }        },        formatData: function (oData) {            var formatData = {};            _.extend(formatData, oData);            formatData.profileImage = currentUserData.profileImage || ''; //追加到原始数据里面            return formatData;        },        // 设置接口参数        setoData: function () {            var elEl = this.element;            var issendEl = $('.is-sendms', elEl);            var issendsms = issendEl.is(':checked');            var replycontent = this.inputTextEl.val();            var rate = this.raterEl.find('.rate').val();            var feedid = this.model.get("feedID");            var ccersbData = this.ccersb.getSelectedData();            var worksbData = this.worktosb.getSelectedData();            var executerID = worksbData.p || [];            var circleIDs = ccersbData.g || [];            var employeeids = ccersbData.p || [];            var employeeNames = '';            var oData = {};            _.each(employeeids, function (employeeId) {                employeeNames += '@' + util.getContactDataById(employeeId, 'p').name + ' ';            });            if (employeeNames) {                replycontent += employeeNames;            }            var files = this.media.getUploadValue();            oData["fileInfos"] = [];            _.each(files, function (file) {                if (file.uploadType == "img") {                    oData["fileInfos"].push({                        "value": 2, //FeedAttachType                        "value1": file.pathName,                        "value2": file.size, //文件总长度（字节）                        "value3": file.name //文件原名                    });                } else if (file.uploadType == "attach") {                    oData["fileInfos"].push({                        "value": 3, //FeedAttachType                        "value1": file.pathName,                        "value2": file.size, //文件总长度（字节）                        "value3": file.name //文件原名                    });                }            });            //指定完成时间            var compDate = this.setotherSelectData.getValue();            var compTime = this.setotherSelectTime.getValue();            var deadline;            if (compDate.length > 0) {                deadline = moment(compDate + " " + compTime, 'YYYYMMDD HH:mm').unix();            } else {                deadline = '';            }            _.extend(oData, {"feedID": feedid, //信息源ID                "replyContent": replycontent, //回复内容                "feedContent": replycontent, //回复内容                "operationType": this.operationtype, //操作类型：枚举FeedApproveOperationType 同意1，不同意2，取消3                "circleIDs": circleIDs, //抄送部门                "employeeIDs": employeeids, //抄送员工ID                "executerID": parseInt(worksbData['p']) || [], //执行人                "isSendSms": issendsms, //是否发送短信                "smsRemindTimes": [                    {},                    {},                    {}                ],                "smsRemindType": 1,                "deadline": deadline,                "assignerID": this.originData.sender.employeeID || null,                "replyToEmployeeID": 0,                "rate": rate,                "replyToReplyID": 0            });            return oData;        },        addRangeAlert: function (params) {            params = _.extend({                "inputSelector": null,                "feedID": 0,                "replyContent": "",                "sendCore": FS.EMPTY_FN,                "sendModalSelector": null            }, params || {});            //获取at内容            var atContents = util.getAtFromInput($(params.inputSelector)),                sendModal = $(params.sendModalSelector);            //验证是否有多加的at范围            if (atContents.length > 0 && params.feedID) {                util.api({                    "url": "/Feed/SendFeedReplyAtEmpCheck",                    "data": {                        "feedID": params.feedID,                        "replyContent": params.replyContent                    },                    "success": function (responseData) {                        var dataRoot,                            hasNewRange = false,                            message = '回复中提到的员工：';                        if (responseData.success) {                            dataRoot = responseData.value;                            hasNewRange = !dataRoot.value;                            if (hasNewRange) {                                message += dataRoot.value1 + '不在信息的原始范围中，是否要添加？添加后他们将能看到信息的原文和所有该信息的回复。';                                util.confirm(message, '添加范围提示', function () {                                    params.sendCore();                                }, {                                    "onCancel": function () {                                        sendModal.hide();                                    }                                });                            } else {                                //直接发送                                params.sendCore();                            }                        }                    }                });            } else {                //直接发送                params.sendCore();            }        },        // 指令关键回复接口操作        fetch: function (oData) {            var elEl = this.$el;            var requestData;            var that = this;            var leaderinfo;            var itemEl = this.itemV.$el;            var planLeaderEl = $('.plan-leader', itemEl);            //把转他人执行的接口操作分离出来单独处理            if (this.submitBtn.is('.changeother')) {                requestData = that.setoData();                requestData.fileInfos = null;                util.api({                    "url": that.url,                    "type": 'post',                    "data": {                        feedID: requestData.feedID,                        replyContent: "取消该指令",                        feedContent: requestData.feedContent,                        circleIDs: requestData.circleIDs,                        employeeIDs: requestData.employeeIDs,                        assignerID: requestData.assignerID,                        executerID: requestData.executerID,                        deadline: requestData.deadline,                        smsRemindType: requestData.smsRemindType,                        smsRemindTimes: requestData.smsRemindTimes,                        isSendSms: false                    },                    "dataType": 'json',                    "success": function (responseData) {                        if (responseData.success) {                            that.itemV.updateModel(); //刷新listV                            var itemOpts = that.itemV.options;                            itemOpts.delegateOtherCb && itemOpts.delegateOtherCb.call(that.itemV, responseData, requestData);//插入一条新feed，这里调用的是feed-list.js的delegateOtherCb方法                        }                    }                }, {                    "submitSelector": that.submitBtn                });            } else {                //上传附件之后再取数据                this.media.send(function (sendCb, sendModal) {                    requestData = that.setoData();                    if (!requestData.replyContent) { //如果内容为空则赋值评分内容                        requestData.replyContent = $("option:selected", that.raterEl).text();                    }                    that.addRangeAlert({                        "inputSelector": that.inputTextEl,                        "feedID": requestData.feedID,                        "replyContent": requestData.replyContent,                        "sendCore": function () {                            // ajax                            util.api({                                "url": that.url,                                "type": 'post',                                "data": requestData,                                "dataType": 'json',                                "success": function (responseData) {                                    if (responseData.success) {                                        that.feedReply.refreshList(); //刷新回复列表                                        if (!that.submitBtn.is('.noupdate')) {                                            that.itemV.updateModel(); //刷新listV                                        } else {                                            //其实这里主要针对未完成继续执行，早知道需求是这样就不都写在一起了，现在又要把每个功能再拆开...                                            leaderinfo = that.itemV.model.get('leaderinfo');                                            that.inputTextEl.val('').height('40px');                                            that.itemEl.find('.con').text('执行中');                                            that._getOneFeed();                                            that.allapperBtn.removeAttr('disabled');                                            that.allapperBtn.removeClass('button-state-disabled');                                        }                                    }                                    sendCb();                                },                                "error": function(){                                	sendCb();                                	util.alert('系统繁忙，请稍后重试。');                                }                            }, {                                "submitSelector": that.submitBtn                            });                        },                        "sendModalSelector": sendModal                    });                }, elEl);            }        },        /**         * 请求一条新的feed         * @param callback         */        "_getOneFeed": function (callback) {            var that = this;            var model = this.itemV.model,                elEl = this.$el;            var itemEl = this.itemV.$el;            var planLeaderEl = $('.plan-leader', itemEl);            util.api({                "url": "/Feed/GetFeedByFeedID",                "type": "get",                "data": {                    "feedID": model.get('feedID')                },                "success": function (responseData) {                    if (responseData.success) {                        var itemData = responseData.value.items[0];                        var executer = 0;                        /* 指令执行人 */                        var workDeadLine = util.getDateSummaryDesc(moment.unix(itemData.work.deadline), moment.unix(itemData.serviceTime), 2),                            workEndTime = util.getDateSummaryDesc(moment.unix(itemData.work.endTime), moment.unix(itemData.serviceTime), 2),                            workEndTimeText = "";                        var executername = itemData.work.executer.name,                            myId = util.getContactData()["u"].id,                            executerid = itemData.work.executer.employeeID;                        executername = '<a class="employee-name" href="#profile/=/empid-' + executerid + '">' + executername + '</a>';                        if (myId == executerid) { //判断我是不是执行人                            executer = "1";                        } else {                            executer = "0";                        }                        /**                         * 判断指令状态通过status                         * 执行中：1；                         * 已完成：2；                         * 已取消：3                         */                        switch (itemData.work.status) {                            case 1:                                if (itemData.work.deadline < responseData.serviceTime) {                                    workEndTimeText = '应于' + workDeadLine + '前完成，<span class="highlight">该指令已超时。</span>';                                } else {                                    workEndTimeText = '应于' + workDeadLine + '前完成，该指令正在执行。';                                }                                break;                            case 2:                                workEndTimeText = '该指令已于' + workEndTime + '完成。';                                break;                            case 3:                                workEndTimeText = '已于' + workEndTime + '取消。';                                break;                        }                        var leaderinfo = '<div class="plan-leader">该指令由' + executername + '执行，' + workEndTimeText + '</div>';                        planLeaderEl.html($(leaderinfo).html());                        callback && callback.call(that, responseData);                    }                }            }, {                "mask": elEl,                "maskCls": "fs-feed-mask"            });        },        // 普通回复接口操作        replyfetch: function () {            var elEl = this.$el;            var requestData;            var that = this;            //上传附件之后再取数据            this.media.send(function (sendCb, sendModel) {                requestData = that.setoData();                that.feedReply.replyWithData(requestData, {                    "mediaSendCb": sendCb, // media的CB                    "sendClearCb": function () {                        that.cancel();                        that.media.resetAll();                    }, // 提交后的CB                    "mediaSendModal": sendModel,                    "subBtnSelector": that.submitBtn //提交按钮                });            }, elEl);        },        //所有按钮事件        allBtn: function (e) {            var meEl = $(e.currentTarget);            this.setupComponent(); //设置组件            this.cancel();//先清空            this.submitBtn.removeClass('noupdate');            this.submitBtn.removeClass('finish');            this.submitBtn.removeClass('changeother');            this.allapperBtn.attr('disabled', 'disabled');            this.allapperBtn.addClass('button-state-disabled');        },        //普通回复        normalBtn: function () {            this.commandBdEl.show();            this.ccerEl.hide(); //抄送人            this.raterEl.hide(); //评分            this.setotherEl.hide();            this.mwarpEl.hide();            this.submitBtn.addClass('re');            this.inputTextEl.attr('placeholder', '添加回复...');        },        //已完成，汇报结果        completeBtn: function () {            this.commandBdEl.show();            this.ccerEl.hide(); //抄送人            this.raterEl.hide(); //评分            this.setotherEl.hide();            this.mwarpEl.hide();            this.url = '/FeedWork/ExecuterSendFeedWorkReply';            this.operationtype = 1;            this.inputTextEl.attr('placeholder', '汇报结果...');        },        //未完成<br/>继续执行        undoneBtn: function () {            this.commandBdEl.show();            this.ccerEl.hide(); //抄送人            this.raterEl.hide(); //评分            this.mediaEl.hide();            this.mwarpEl.hide();            this.setotherEl.hide();            this.url = '/FeedWork/AssignerSendFeedWorkReply';            this.operationtype = 2;            this.submitBtn.addClass('noupdate');            this.inputTextEl.attr('placeholder', '添加回复...');        },        //取消指令<br/>转他人执行        cancelBtn: function () {            this.commandBdEl.show();            this.setotherEl.show();            this.mediaEl.hide();            this.mwarpEl.show();            this.ccerEl.show(); //抄送人            this.raterEl.hide(); //评分            this.url = '/FeedWork/ChangeOtherSendFeedWork';            this.operationtype = null;            this.submitBtn.addClass('changeother');            this.inputTextEl.attr('placeholder', '添加回复...');        },        //已完成<br/>点评结果        doneBtn: function () {            this.commandBdEl.show();            this.mediaEl.hide();            this.mwarpEl.hide();            this.ccerEl.show(); //抄送人            this.raterEl.show(); //评分            this.setotherEl.hide();            this.url = '/FeedWork/AssignerSendFeedWorkReply';            this.operationtype = 4;            this.submitBtn.addClass('finish');            this.inputTextEl.attr('placeholder', '点评结果...');        },        // 指令-提交        submit: function (e) {            var meEl = $(e.currentTarget);            if (meEl.is('.re')) { //如果是普通回复                if (this.isEmpty(this.inputTextEl)) { //如果为空暂定操作                    this.replyfetch();                }            } else {//如果是关键回复                if (meEl.is('.finish')) { //如果是已完成点评结果                    this.fetch(this.setoData());                } else {                    if (this.isEmpty(this.inputTextEl)) { //如果为空暂定操作                        this.fetch(this.setoData());                    }                }            }        },        // 判断表单内容是否为空        isEmpty: function (target) {            var targetText = target.val();            var passed = true;            targetText = $.trim(targetText);            // 内容不能为空            if (targetText == "") {                util.showInputError(target);                passed = false;            }            // 不能超过2000字            if (targetText.length > 2000) {                util.alert('发送内容不超过2000字，目前已超出<em>' + (targetText.length - 2000) + '</em>个字');                passed = false;            }            //日期不能为空            if (!this.operationtype) {                if (!this.setoData()["deadline"]) {                    util.showInputError($('input', this.sDEl));                    passed = false;                }            }            return passed;        },        // 清空        destroy: function () {            this.remove();        },        cancel: function () {            this.commandBdEl.hide();            this.inputTextEl.val('').trigger('autosize.resize');            this.submitBtn.removeClass('re');            this.ccersb.removeAllItem();            this.raterEl.find('.rate').val(3);            this.allapperBtn.removeAttr('disabled');            this.allapperBtn.removeClass('button-state-disabled');        },        render: function () {            var elEl = this.$el;            var renderTemplate = this.template;            var originData = this.model.toJSON().originData;            elEl.html(renderTemplate(this.formatData(originData)));            return this;        }    });    module.exports = {        "ApproveV": ApproveV, //审批功能        "CommandV": CommandV //指令功能    };});